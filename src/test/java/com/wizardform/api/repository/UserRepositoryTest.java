package com.wizardform.api.repository;

import com.wizardform.api.model.Role;
import com.wizardform.api.model.User;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.context.ActiveProfiles;

import java.util.Optional;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.assertTrue;

@DataJpaTest
@ActiveProfiles("test")
public class UserRepositoryTest {

    @Autowired
    private UserRepository userRepository;
    @Autowired
    private RoleRepository roleRepository;
    private User testUser;
    private Role testRole;

    @BeforeEach
    void setUp() {
        testRole = new Role(1, "ROLE_TEST", null);
        roleRepository.save(testRole);
        testUser = new User(1L, "firstName", "lastName", "test@email", "123", true, testRole, null);
        userRepository.save(testUser);
    }

    // UserId, RequestId & FileId are configured to get auto generated by db
    // so, no need to explicitly check for these as these will be auto incremented after each subsequent record insertion
    @Test
    void findByUserId_ShouldReturnUser_WhenUserExists() {
        Optional<User> foundUser = userRepository.findByUserId(testUser.getUserId());
        assertTrue(foundUser.isPresent());
//        assertThat(foundUser.get().getUserId()).isEqualTo(testUser.getUserId());
        assertThat(foundUser.get().getFirstName()).isEqualTo(testUser.getFirstName());
        assertThat(foundUser.get().getLastName()).isEqualTo(testUser.getLastName());
        assertThat(foundUser.get().getEmail()).isEqualTo(testUser.getEmail());
        assertThat(foundUser.get().getPassword()).isEqualTo(testUser.getPassword());
        assertThat(foundUser.get().getRole().getRoleId()).isEqualTo(testUser.getRole().getRoleId());
        assertThat(foundUser.get().getRole().getRoleType()).isEqualTo(testUser.getRole().getRoleType());
    }

    @Test
    void findByUserId_ShouldReturnEmpty_WhenUserDoesNotExist() {
        Optional<User> foundUser = userRepository.findByUserId(999L);
        assertTrue(foundUser.isEmpty());
    }

    @Test
    void findByEmail_ShouldReturnUser_WhenEmailExists() {
        Optional<User> foundUser = userRepository.findByEmail(testUser.getEmail());
        assertTrue(foundUser.isPresent());
//        assertThat(foundUser.get().getUserId()).isEqualTo(testUser.getUserId());
        assertThat(foundUser.get().getFirstName()).isEqualTo(testUser.getFirstName());
        assertThat(foundUser.get().getLastName()).isEqualTo(testUser.getLastName());
        assertThat(foundUser.get().getEmail()).isEqualTo(testUser.getEmail());
        assertThat(foundUser.get().getPassword()).isEqualTo(testUser.getPassword());
        assertThat(foundUser.get().getRole().getRoleId()).isEqualTo(testUser.getRole().getRoleId());
        assertThat(foundUser.get().getRole().getRoleType()).isEqualTo(testUser.getRole().getRoleType());
    }

    @Test
    void findByEmail_ShouldReturnEmpty_WhenEmailDoesNotExist() {
        Optional<User> foundUser = userRepository.findByEmail("nonexistent@email.com");
        assertTrue(foundUser.isEmpty());
    }

    @AfterEach
    void tearDown() {
        testUser = null;
        testRole = null;
        userRepository.deleteAll();
        roleRepository.deleteAll();
    }
}
